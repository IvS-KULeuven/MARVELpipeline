#+TITLE:MARVELpipeline
Data processing and radial velocity estimation pipeline of the MARVEL spectrograph


** Running the different components of the pipeline

The pipeline is made out of different components that can run one after the other.
Every time a component finishes it will create a FITS file with the intermediate results
saved into it. This file can then serve as input for another component. An example of
how these components rely on the results of previous components is illustrated in the following graph:

#+CAPTION:Shows components needed to create an "Optimal Science Extraction" image and how these are in turn dependent on other components.
#+NAME: fig:Optimal Extraction
[[./Docs/Images/my_output_file.png]]

** Dependencies

*** Rust and DVC

The pipeline components are written in Python or [[https://foundation.rust-lang.org/][rust]]. To manage the pipeline we use a command
tool called [[https://dvc.org/][DVC]]. In the following section, we explain how to install the Python packages using
poetry. To install [[https://www.rust-lang.org/tools/install][rust]] and [[https://dvc.org/#get-started-dvc][DVC]] we recommend following the official installation guide given on
their respective websites. 

*** Python dependencies

Before starting to install the packages, we recommend using a software tool to manage different environments
like [[https://docs.conda.io/projects/conda/en/stable/commands/create.html][conda]] to create an environment for marvel. Using conda, use the command:

#+begin_src shell
  conda create -n marvelpipeline [python=<python version>]
#+end_src

where the ~<python-version>~ should be higher than Python 3.8. We can then activate the environment with

#+begin_src shell
  conda activate marvelpipeline
#+end_src

To install the needed Python packages we recommend installing [[https://python-poetry.org/][poetry]] using [[https://python-poetry.org/docs/][the official installation]].
This tool allows us to install all the packages with one command in a deterministic way.
After installation, we can check that poetry was successfully installed by running

#+begin_src shell
  poetry --version
#+end_src

If we receive an error something went wrong when installing poetry. If not we can install the dependencies
with one command:

#+begin_src shell
  poetry install
#+end_src


** Compiling the pipeline

Part of the pipeline is written using Rust. This code needs to be compiled before it can be run.
This process a made easy by simply running the command:

#+begin_src shell
  ./compile
#+end_src


** Configuration

Before the pipeline is can be run, it needs to know which files it can use as input. This input is provided by a simple
input YAML file (~inputfile.yaml~). The YAML file consists simply of three keys _rawBiasImage_, _rawFlatImage_ and _rawScienceImage_. Their respective
values are lists containing the corresponding files that should be used as input for the pipeline. An example of such an input file
is given in ~inputfile.yaml~.

*** The =configure.py= script

While the pipeline is running, multiple intermediate files are created in the process. This is to help troubleshoot if we want to
check certain calculations. For the pipeline to know where these files can be saved and not overwrite other files these
paths are set up in a ~params.yaml~ file. This file can be generated from the ~inputfile.yaml~ file using the ~configure.py~ script
as:

#+begin_src shell
  python configure.py inputfile.yaml
#+end_src

This way we get a sensible input file ~params.yaml~ using a much more minimal file ~inputfile.yaml~.


** Running the entire pipeline

Finally, the pipeline can be run using DVC by running

#+begin_src shell
  dvc repro
#+end_src





