# We use this module for opperations that will be commonly used in different pipelineModules




from astropy.io import fits
import numpy as np
from pymongo import MongoClient

client = MongoClient()
db = client["databaseMARVEL"]




def saveFigure(figure):
    ...


def getImages(paths):
    return np.array([getImage(path) for path in paths])



def getImage(path):
    hdul = fits.open(path)
    return hdul[0].data




def addToDataBase(dict, overWrite=False):
    # We should have proper error catching for:
    # 1. We want to add somthing that already exist
    # 2. image is not in the dictornary
    # 3. Check that dict is in the right format 

    images     = {"Master Dark Image": "DarkImages", "Master Bias Image": "BiasImages", "Master Flat Image": "FlatImages", "Calibrated Science Image" : "ScienceImages"}
    typeImage  = dict["type"]
    collection = db[images[typeImage]]

    isInCollection = np.all([x == dict for x in collection.find({"_id" : dict["_id"]})])

    if not isInCollection:
        collection.inster_one(dict)

    elif overWrite:
        collection.delete_many({"_id": dict["_id"]})
        collection.insert_one(dict)
    else:
        print("Document is already in database")
    
    
        
def getPositionsOfOrders():
    p = {}
    positions = [271.06906306345707, 288.6914358908522, 307.9282027760769, 325.3463919968236, 342.3464864319031, 547.314074582757, 562.8290135826136, 579.9822117677322, 595.3644568319994, 611.068807943924, 807.8008008628187, 824.4555800922623, 840.9372942853912, 856.9131503248539, 872.1700897753782, 1061.0042287342296, 1078.4449314405574, 1093.718081721024, 1110.2450967792652, 1125.4771134473276, 1308.7595967644775, 1324.6200125003224, 1339.8337046085621, 1356.9458747379126, 1373.380480387468, 1549.103422396806, 1566.2298851121368, 1581.4494100499778, 1596.6937653921773, 1611.9115669044177, 1784.1539543279046, 1800.997217189317, 1816.3152647142056, 1831.5362374653555, 1848.9705899907426, 2014.6933830716457, 2030.0728730479514, 2046.4664682591142, 2061.7698427772098, 2077.9754057091454, 2236.555890363361, 2252.0191553361524, 2268.5015462277697, 2283.9051174299443, 2299.6938396673618, 2453.842351810493, 2469.5171962633635, 2487.3923042716224, 2502.927638997711, 2521.1055000775295, 2666.0341551803094, 2682.358889396776, 2699.3354036168203, 2715.158953865929, 2731.026160244147, 2874.156653555941, 2890.0389153192077, 2905.860776163449, 2921.6754982597877, 2938.3567617312888, 3075.8528264465062, 3092.2027512007817, 3108.418027830255, 3124.34329206456, 3140.9825013623085, 3273.5327578581973, 3289.6658428935607, 3305.799558863772, 3321.9072511304207, 3337.9503415710296, 3466.5209087279013, 3482.610376219783, 3498.6879972378497, 3514.768257567991, 3530.868361939801, 3655.017473722253, 3671.0788214843064, 3687.1120118183953, 3703.1619283465448, 3719.232397789378, 3839.192941774442, 3855.1883371937906, 3871.1869071467436, 3887.1973987359315, 3903.2301491121384, 4019.1519419805627, 4035.1153680928337, 4051.079184214144, 4067.056489757279, 4083.062551568474, 4194.99419392376, 4210.90915617388, 4226.814656876538, 4242.762470239484, 4258.745699343271, 4366.853055824926, 4382.7461934062085, 4398.650829386187, 4414.566669072016, 4430.521351116687, 4534.873991924154, 4550.736737092808, 4566.6115735259855, 4582.498433286968, 4598.423114029814, 4699.187521960876, 4714.983581555685, 4730.800336162694, 4746.665289733164, 4762.564882044768, 4859.785831317976, 4875.59348887922, 4891.401407988361, 4907.227619044957, 4923.098253748274, 5016.934595511916, 5032.645495921555, 5048.422443837458, 5064.230144093777, 5080.076790834697, 5170.582066659915, 5186.286379153562, 5202.036025229132, 5217.80440809377, 5233.616442203771, 5320.870269775624, 5336.603570326887, 5352.293383505666, 5367.994153231152, 5383.80253199592, 5467.930622639568, 5483.600716098891, 5499.294848648281, 5514.993839199334, 5530.714489918128, 5611.811642101626, 5627.4523886322495, 5643.108042027384, 5658.794287050615, 5674.510665532998, 5752.571575286661, 5768.24083531922, 5783.834366484145, 5799.503806098134, 5815.201863852379, 5890.312579840052, 5905.991041767313, 5921.579943966299, 5937.196287051937, 5952.871762229375, 6025.165542896891, 6040.781308411779, 6056.396160707039, 6071.931471969399, 6087.6022003083035, 6157.131417892357, 6172.753015853686, 6188.290185907212, 6203.883358268223, 6219.43799964465, 6286.3214110195995, 6301.855369444421, 6317.448263987684, 6332.987693972012, 6348.561231866541, 6412.779283450121, 6428.314891448716, 6443.866789213211, 6459.385865161065, 6474.931777543944, 6536.552621454922, 6552.132877307703, 6567.593703858527, 6583.143810993466, 6598.613576537286, 6657.7897245469685, 6673.340198486618, 6688.794352231675, 6704.309365240583, 6719.773486891868, 6776.527481892518, 6792.0025509102325, 6807.482501330185, 6822.934591525495, 6838.397813757185, 6892.775003795853, 6908.233324280357, 6923.675331333836, 6939.122686690748, 6954.518585958604, 7006.614573250723, 7022.078887620335, 7037.486792373366, 7052.879335930457, 7068.324887682187, 7118.131965116888, 7133.573855120987, 7148.936378160937, 7164.363202585042, 7179.732174679188, 7227.381266477868, 7242.7966104127045, 7258.1394708427415, 7273.531969854639, 7288.880806873267, 7334.395812571607, 7349.802473333048, 7365.144353278717, 7380.444769701858, 7395.814515588676, 7439.300378273342, 7454.604450260224, 7469.971950870725, 7485.283552346388, 7500.55852003687, 7542.073534836481, 7557.3906350589, 7572.673932231255, 7587.96203709525, 7603.277238016943, 7642.795163289197, 7658.068141805952, 7673.394796342577, 7688.64171005637, 7703.899487569957, 7741.586355015313, 7756.839246919943, 7772.061612552199, 7787.3218998910115, 7802.615175154072, 7838.409136018597, 7853.667218493303, 7868.880512013852, 7884.100698449969, 7899.347263578217, 7933.367611350944, 7948.612011684528, 7963.829115850828, 7979.060788448144, 7994.281822817918, 8026.54161755582, 8041.786005847731, 8056.987309252079, 8072.199481104393, 8087.404999699469, 8118.058184156789, 8133.212783980461, 8148.3985521442155, 8163.58961481124, 8178.834467139528, 8207.805060117727, 8223.008230196276, 8238.211467746192, 8253.389753958798, 8268.556562783597, 8296.033371308811, 8311.232399182496, 8326.403163348, 8341.56359151297, 8356.708455581238, 8382.727352345066, 8397.877426913908, 8413.092512347752, 8428.253874452057, 8443.38975796871, 8468.019822914323, 8483.208771789337, 8498.350945075668, 8513.482929091588, 8528.594828172687, 8551.942119329446, 8567.094898017323, 8582.24583714721, 8597.369613304963, 8612.459838802271, 8634.66100576584, 8649.771495774745, 8664.868607763761, 8679.95026871189, 8695.017021187829, 8716.125790498545, 8731.261466830882, 8746.364319805589, 8761.434442581609, 8776.510942248795, 8796.618838303975, 8811.701137764616, 8826.75756240361, 8841.814305755888, 8856.885651712973, 8876.068310611354, 8891.11687870224, 8906.16325438683, 8921.233414829594, 8936.33660725487, 8954.748598937564, 8969.794463790973, 8984.859816122917, 8999.917751280045, 9014.97026852886, 9032.724890995636, 9047.785187923402, 9062.844721056887, 9077.895396142767, 9092.927348147017, 9110.16435627725, 9125.216496961148, 9140.25547979524, 9155.287503947779, 9170.296398763105, 9187.29014879065, 9202.325781983662, 9217.348125588736, 9232.371454014963, 9247.354456454861, 9264.282662800413, 9279.29955005841, 9294.302972991132, 9309.29109290893, 9324.272776657666]


    fibers = []
    orders = []
    for i in np.arange(np.size(positions)):
        order = int((i)/5)+1
        fiber = int((i+1)%5)
        if (fiber == 0):
            fiber=5

        fibers.append(fiber)
        orders.append(order)

    p = np.array([fibers, orders, positions])
    
    return p



if __name__ == "__main__":
    path = "/lhome/driess/MARVEL/MARVELpipe/Data/RawData/CalibrationImages/Bias/bias_0001.fits"
    print(getImage(path))
