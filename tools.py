# We use this module for opperations that will be commonly used in different pipelineModules




from astropy.io import fits
import numpy as np
from pymongo import MongoClient

client = MongoClient()
db = client["databaseMARVEL"]




def saveFigure(figure):
    ...


def getImages(paths):
    return np.array([getImage(path) for path in paths])



def getImage(path):
    hdul = fits.open(path)
    return hdul[0].data




def addToDataBase(dict, overWrite=False):
    # We should have proper error catching for:
    # 1. We want to add somthing that already exist
    # 2. image is not in the dictornary
    # 3. Check that dict is in the right format 

    images     = {"Master Dark Image": "DarkImages", "Master Bias Image": "BiasImages", "Master Flat Image": "FlatImages", "Calibrated Science Image" : "ScienceImages"}
    typeImage  = dict["type"]
    collection = db[images[typeImage]]

    isInCollection = np.all([x == dict for x in collection.find({"_id" : dict["_id"]})])

    if not isInCollection:
        collection.inster_one(dict)

    elif overWrite:
        collection.delete_many({"_id": dict["_id"]})
        collection.insert_one(dict)
    else:
        print("Document is already in database")
    
    
        
def getPositionsOfOrders():
    p = {}
    positions = [7781.4194504115, 7808.667401955562, 7853.671830586125, 7903.8366908421485, 7949.998615391308, 8112.034267263189, 8160.2766002081025, 8214.319677283813, 8262.343223385396, 8312.762124068258, 8544.739744240169, 8602.918833263871, 8655.223737406468, 8714.89094503798, 8753.566404448313, 8983.664320551397, 9045.035678242895, 9106.604241800906, 9154.411009408492, 9183.651832192962, 9401.190839486118, 9464.95716579066, 9519.500615606514, 9564.404799977914, 9612.452935228723, 9795.854395203736, 9866.151032644713, 9923.81878039378, 9966.78482529655, 9995.677163718734, 10185.606404006412, 10249.234875768729, 10297.89782377962, 10353.88633039274, 10351.485639926588, 10549.471814241997, 10621.38217677234, 10681.551869422117, 10709.952463402244, 10732.622500001118, 10922.88448138527, 10979.84218125581, 11045.89600198562, 11077.192355605643, 11108.318184995027, 11280.653260832514, 11354.745876585319, 11399.791822764226, 11452.700324315361, 11474.240219153062, 11632.568866576581, 11722.002591500244, 11757.79705224806, 11827.81285132606, 11832.476000064184, 11982.890551803326, 12071.655564459335, 12130.749749969567, 12194.877810885435, 12181.755158560503, 12332.802051331302, 12418.042487860122, 12498.338133271704, 12546.939311664271, 12524.817564852641, 12675.191832195775, 12763.150141695074, 12856.810718453537, 12896.35223799023, 12865.40439104553, 13001.20897153415, 13107.50353140217, 13201.287191784988, 13232.548729752485, 13200.280257409135, 13316.791194271731, 13446.369229594136, 13538.16085161704, 13563.959390281405, 13524.796524637839, 13621.531652222195, 13782.415135037785, 13874.670612655547, 13891.513973953923, 13847.035541261524, 13920.448927111125, 14101.350872340918, 14195.960203634444, 14206.643626095836, 14156.47341903699, 14206.67431066136, 14408.391978686825, 14508.84334315774, 14516.037970479623, 14461.144299750165, 14490.560497076447, 14715.647631920421, 14819.576947566757, 14822.11317632593, 14759.340489818635, 14766.946650738375, 15006.779873822752, 15120.081519745787, 15121.984389019311, 15052.014952013484, 15027.964745447243, 15284.123561419794, 15416.567572826632, 15422.209342883021, 15347.093022574978, 15286.690211780679, 15570.79815026738, 15713.364923265457, 15717.686082600343, 15635.536033058805, 15546.245139615536, 15850.715488381826, 16009.685061896138, 16019.179784050899, 15933.80734781044, 15812.33778897315, 16150.153517701036, 16313.884062701181, 16326.008592444336, 16235.07198415641, 16117.979265653408, 16460.55565305556, 16624.61463435022, 16651.31328589583, 16561.10019610724, 16446.352400737596, 16785.381902836238, 16967.678162401604, 16989.304140044456, 16898.584954080692, 16808.080410091417, 17119.3819548002, 17324.95233085003, 17357.2048877081, 17253.942878413975, 17189.101404984114, 17487.068169492162, 17698.393369198348, 17740.693583019867, 17630.18648548035, 17602.3052238233, 17892.73486927137, 18088.089115883606, 18137.73710269448, 18021.845205472506, 18047.072738687657, 18334.54512418261, 18507.83545135125, 18542.52108757315, 18433.478586355253, 18530.137615293334, 18787.487059004037, 18944.01128362955, 18974.570339498805, 18855.45247142849, 19017.104610220485, 19264.14463257615, 19404.71284073328, 19422.57069251791, 19312.98104892429, 19527.9058743579, 19759.509768457276, 19895.126295057995, 19892.84027904628, 19778.648094897082, 20057.67161049216, 20284.314988802613, 20395.386281512154, 20381.55496781494, 20250.317018962996, 20609.617839026105, 20811.37102742521, 20912.008804537567, 20872.968405832726, 20739.33898694744, 21164.17977350387, 21356.844621743774, 21423.51803097915, 21383.989385022578, 21214.87477609916, 21724.542481651577, 21900.445994474612, 21947.154089265252, 21880.228994697118, 21702.798194656487, 22293.052296072958, 22430.406029315942, 22470.817710633033, 22361.209514140606, 22188.16369139755, 22835.185835158984, 22959.534024832898, 22967.300250775676, 22848.028174721316, 22658.189309965106, 23382.653410748702, 23478.00676134646, 23460.205934297075, 23316.710608175017, 23123.145434122504, 23946.252065046552, 23996.965148828836, 23952.940641053738, 23797.993068584685, 23598.195560846023, 24525.23619240329, 24533.23661276586, 24449.816269966017, 24300.276246818277, 24129.216240147536, 25111.160814711984, 25083.22115796327, 24995.5057570856, 24820.997069755955, 24700.94409120377, 25736.14252194942, 25653.873003284498, 25546.55990053688, 25395.87431817261, 25324.645990516496, 26355.22727942058, 26261.992514155354, 26119.299184626536, 25978.66178726034, 25959.58971534518, 26971.8432826481, 26849.382033186805, 26708.7729364095, 26628.07683801098, 26609.10340742784, 27596.49144987813, 27445.99643709146, 27318.86439230306, 27292.0484064791, 27279.076781336218, 28184.327859474244, 28045.335810813693, 27961.222467210508, 27948.692333919924, 27929.073839346063, 28733.499468154074, 28614.691749600745, 28582.995409224975, 28571.326881257308, 28545.958462791656, 29191.11367773049, 29128.34187531886, 29131.536753310713, 29132.410632048195, 29112.345502029504, 29570.926821616442, 29564.7526381255, 29571.938646993447, 29565.48198340112, 29545.890433118337, 29850.09679613066, 29841.72776362537, 29833.55481003525, 29825.21309499324, 29811.765955927844, 29895.387814380454, 29896.164492815857, 29885.393654235504, 29871.46467997707, 29851.567461187267, 29661.004011576704, 29647.765637136275, 29627.51735348384, 29609.544248919177, 29591.989604013994, 29061.24767783878, 29052.755611583467, 29029.2874736229, 29010.0648967366, 28991.844553758383, 28035.139839734045, 28015.47216855514, 28001.286485407923, 27991.833886268727, 27983.260380630873, 26579.780965345344, 26568.208835943722, 26562.545441181304, 26555.9309692252, 26540.2253648115, 24671.061274693282, 24664.6961700538, 24656.993513360365, 24637.15971737822, 24620.3947439981, 22286.39849081297, 22286.978509152385, 22276.356385961823, 22265.708274507306, 22254.789419602435, 19439.520533325707, 19435.131687359306, 19425.99215841632, 19417.600716215085, 19412.05694881203, 16186.54998273242, 16181.475984978742, 16175.022985570617, 16168.245446631858, 16164.557468161946, 12660.736913457175, 12658.335968572983, 12654.635051992458, 12652.930313306637, 12651.508002630364, 9115.039082826632, 9114.83523507027, 9113.595201491473, 9113.001173999668, 9112.633790791653]


    fibers = []
    orders = []
    for i in np.arange(np.size(positions)):
        order = int((i)/5)+1
        fiber = int((i+1)%5)
        if (fiber == 0):
            fiber=5

        fibers.append(fiber)
        orders.append(order)

    p = np.array([fibers, orders, positions])
    
    return p



if __name__ == "__main__":
    path = "/lhome/driess/MARVEL/MARVELpipe/Data/RawData/CalibrationImages/Bias/bias_0001.fits"
    print(getImage(path))
